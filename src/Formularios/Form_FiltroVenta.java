
package Formularios;

import java.util.HashMap;
import javax.swing.JOptionPane;
import Controllers.DBConexion;
import Controllers.DBTableController;
import Filtros.DefaultFocusListener;
import Filtros.TextFilter;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Map;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.text.AbstractDocument;
import javax.swing.*;


public class Form_FiltroVenta extends javax.swing.JDialog {
private DBTableController tr;
    private DBTableController tu;
    private Map<String, Object> filtrosMap;
    private HashMap<String, Object> parametros;
    private Form_ReportesVenta formReportes; // Agregar esta línea

    public Form_FiltroVenta(java.awt.Frame parent, boolean modal, Form_ReportesVenta formReportes) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);
        tr = new DBTableController();
        tr.iniciar("VENTAS");
        filtrosMap = new HashMap<>();  // Inicialización de mapData
        this.formReportes = formReportes; 
        this.addKeyListener(new KeyAdapter() {
    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_ENTER) {
            imFiltrar();
        }
    }
});
this.setFocusable(true);
    }


private void applyAlphaFilter(JTextField textField) {
        javax.swing.text.Document doc = textField.getDocument();
        if (doc instanceof AbstractDocument) {
            ((AbstractDocument) doc).setDocumentFilter(new TextFilter());
        }
    }

private void setMapData() {
    filtrosMap.clear();

    try {
        // Filtrar por fechas
        if (FechaDesde.getDate() != null && FechaHasta.getDate() != null) {
            filtrosMap.put("fechaDesde", new java.sql.Date(FechaDesde.getDate().getTime()));
            filtrosMap.put("fechaHasta", new java.sql.Date(FechaHasta.getDate().getTime()));
            System.out.println("FechaDesde: " + filtrosMap.get("fechaDesde"));
            System.out.println("FechaHasta: " + filtrosMap.get("fechaHasta"));
        } else {
            System.out.println("Una o ambas fechas son nulas.");
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al establecer datos de mapa: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

private void resetData() {
    FechaDesde.setDate(null);
    FechaHasta.setDate(null);
    filtrosMap.clear();


}
private void fillView() {

}

private <T> T getOrDefault(String key, T defaultValue) {
    return (T) filtrosMap.getOrDefault(key, defaultValue);
}


public int imFiltrar() {
    try {
        parametros = new HashMap<>();

        // Verificar si no se seleccionaron fechas (reporte completo)
        if (FechaDesde.getDate() == null && FechaHasta.getDate() == null) {
            parametros.put("FechaDesdeParam", null);
            parametros.put("FechaHastaParam", null);
            System.out.println("Generando reporte completo: Parámetro FechaDesdeParam = null, FechaHastaParam = null");
        }
        // Verificar si ambas fechas están seleccionadas (reporte filtrado)
        else if (FechaDesde.getDate() != null && FechaHasta.getDate() != null) {
            java.sql.Date fechaDesde = new java.sql.Date(FechaDesde.getDate().getTime());
            java.sql.Date fechaHasta = new java.sql.Date(FechaHasta.getDate().getTime());

            parametros.put("FechaDesdeParam", fechaDesde);
            parametros.put("FechaHastaParam", fechaHasta);

            // Imprimir valores de parámetros en la consola
            System.out.println("Generando reporte filtrado:");
            System.out.println("Parámetro FechaDesdeParam: " + fechaDesde);
            System.out.println("Parámetro FechaHastaParam: " + fechaHasta);
        }
        // Verificar si solo una fecha fue ingresada (error)
        else {
            JOptionPane.showMessageDialog(this,
                "Debe ingresar ambas fechas o ninguna para generar el reporte.",
                "Error", JOptionPane.ERROR_MESSAGE);
            System.out.println("Error: Solo una fecha seleccionada. No se puede generar el reporte.");
            return -1;
        }

        return 0; // Éxito
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this,
            "Error al asignar parámetros para el informe: " + e.getMessage(),
            "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
        return -1;
    }
}



    /**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbl_usuario = new javax.swing.JLabel();
        lbl_Rol = new javax.swing.JLabel();
        Filtrar = new javax.swing.JLabel();
        jbAceptar = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();
        lbl_Rol1 = new javax.swing.JLabel();
        FechaHasta = new com.toedter.calendar.JDateChooser();
        FechaDesde = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Filtro Usuarios");
        setResizable(false);

        jPanel1.setPreferredSize(new java.awt.Dimension(500, 245));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_usuario.setText("Rango Fecha");
        jPanel1.add(lbl_usuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, 20));

        lbl_Rol.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_Rol.setText("Hasta");
        lbl_Rol.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel1.add(lbl_Rol, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 50, 170, -1));

        Filtrar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Filtrar.setText("Filtrar ");
        jPanel1.add(Filtrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, -1, -1));

        jbAceptar.setText("Aceptar");
        jbAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAceptarActionPerformed(evt);
            }
        });
        jPanel1.add(jbAceptar, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 120, -1, -1));

        jbCancelar.setText("Cancelar");
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });
        jPanel1.add(jbCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 120, -1, -1));

        lbl_Rol1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_Rol1.setText("Desde");
        lbl_Rol1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel1.add(lbl_Rol1, new org.netbeans.lib.awtextra.AbsoluteConstraints(62, 50, 170, -1));
        jPanel1.add(FechaHasta, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 70, 140, -1));
        jPanel1.add(FechaDesde, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, 140, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void jbAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAceptarActionPerformed
try {
        // Validar si solo una fecha fue ingresada
        if ((FechaDesde.getDate() != null && FechaHasta.getDate() == null) || 
            (FechaDesde.getDate() == null && FechaHasta.getDate() != null)) {
            JOptionPane.showMessageDialog(this, 
                "Debe ingresar ambas fechas o ninguna para generar el reporte.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            resetData();
            return; // Sale si hay una fecha incompleta
        }

        // Si todo es correcto, llamar a imFiltrar
        if (imFiltrar() == 0) { 
            System.out.println("Enviando parámetros al reporte...");
            formReportes.actualizarYGenerarReporte(this.parametros);
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo establecer los filtros para el informe.");
            return;
        }

        this.dispose(); // Cierra el formulario de filtro
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, 
            "Ocurrió un error al intentar generar el informe: " + e.getMessage(), 
            "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }//GEN-LAST:event_jbAceptarActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
         resetData();  // Limpia todos los campos y restablece el estado de los controles
    }//GEN-LAST:event_jbCancelarActionPerformed

    /**
     * @param args the command line arguments
     */
public static void main(String args[]) {
    /* Establece la apariencia visual Nimbus */
    //<editor-fold defaultstate="collapsed" desc=" Código de configuración de apariencia (opcional) ">
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger(Form_FiltroVenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>
    //</editor-fold>

    /* Crea y muestra el diálogo */
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            // Suponiendo que no estamos configurando funcionalidad de filtrado aquí
            // porque no tiene sentido abrir solo un formulario de filtro en main.
            // Típicamente, abrirías una ventana principal de la aplicación.
            JFrame frame = new JFrame("Ventana Principal");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(800, 600);
            frame.setLocationRelativeTo(null);

            // Si necesitas abrir el filtro directamente para pruebas:
            Form_FiltroVenta dialog = new Form_FiltroVenta(frame, true, null);  // Pasando null si no se necesita un callback para pruebas
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        }
    });
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser FechaDesde;
    private com.toedter.calendar.JDateChooser FechaHasta;
    private javax.swing.JLabel Filtrar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbAceptar;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JLabel lbl_Rol;
    private javax.swing.JLabel lbl_Rol1;
    private javax.swing.JLabel lbl_usuario;
    // End of variables declaration//GEN-END:variables

}
